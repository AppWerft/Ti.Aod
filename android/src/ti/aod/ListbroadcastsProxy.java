/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2017 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.aod;

import java.io.IOException;
import java.util.ArrayList;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiC;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.util.TiConvert;
import org.appcelerator.titanium.proxy.TiViewProxy;
import org.appcelerator.titanium.view.TiCompositeLayout;
import org.appcelerator.titanium.view.TiCompositeLayout.LayoutArrangement;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.appcelerator.titanium.view.TiUIView;

import android.app.Activity;
import android.os.AsyncTask;
import ti.aod.PreviewdataProxy.SoupRequestHandler;


// This proxy can be created by calling Drau.createExample({message: "hello world"})
@Kroll.proxy(creatableInModule=AodModule.class)
public class ListbroadcastsProxy extends KrollProxy
{
	// Standard Debugging variables
	private static final String LCAT = AodModule.LCAT;
	private int station =0;
	private String url ="https://srv.deutschlandradio.de/aodlistbroadcasts.1707.de.rpc";
	private KrollFunction onLoad;
	private KrollFunction onError;
	private Document doc;

	// Constructor
	public ListbroadcastsProxy()
	{
		super();
	}
	
	
	private final class SoupRequestHandler extends AsyncTask<Void, Void, KrollDict> {
		@Override
		protected KrollDict doInBackground(Void[] arg0) {
			KrollDict resultDict = new KrollDict();
			
			try {
				Log.d(LCAT, url);
				ArrayList broadcastings = new ArrayList();
				doc = Jsoup.connect(url).ignoreContentType(false).get();
				for (Element broadcasting : doc.select("item")) {
					KrollDict node = new KrollDict();
					node.put("id", broadcasting.attr("id"));
					node.put("name", broadcasting.text());
					broadcastings.add(node);
				}
				resultDict.put("broadcastings", broadcastings.toArray());	
				
			} catch (IOException e) {
				e.printStackTrace();
				if (onError != null)
					onError.call(getKrollObject(), resultDict);
			}
			return resultDict;
		}

		protected void onPostExecute(KrollDict resultDict) {
			if (onLoad != null) {
				resultDict.put("charset", doc.charset().name());
				resultDict.put("location", doc.location());
				resultDict.put("length", doc.toString().length());
				onLoad.call(getKrollObject(), resultDict);
			} else
				Log.w(LCAT, "onload is missing");
		}
	}

	@Override
	public void handleCreationDict(KrollDict opts) {
		super.handleCreationDict(opts);

		if (opts.containsKey("station")) {
			station = opts.getInt("station");
			url = url + "?drbm:station_id=" + station;
		}
		if (opts.containsKey("onload")) {
			onLoad = (KrollFunction)opts.get("onload");
			
		}
		if (opts.containsKey("onerror")) {
			onError = (KrollFunction)opts.get("onerror");
		}
		AsyncTask<Void, Void, KrollDict> doRequest = new SoupRequestHandler();

	}
	
	
}
