/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2017 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.aod;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Timer;
import java.util.TimerTask;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;

import android.os.AsyncTask;
import android.os.Handler;

@Kroll.proxy(creatableInModule = AodModule.class, propertyAccessors = { "onLoad"})
public class PreviewdataProxy extends KrollProxy {
	// Standard Debugging variables
	private static final String LCAT = AodModule.LCAT + "Preview";

	private int station;
	private long interval = 1000;
	private boolean running = false;
	private Timer timer;
	KrollFunction onError;
	KrollFunction onLoad;
	Document doc;

	private String url = "http://srv.deutschlandradio.de/aodpreviewdata.1915.de.rpc?drbm:station_id=";

	// Constructor
	public PreviewdataProxy() {
		super();
	}

	private KrollDict getCurrentbroadcast() {
		if (AodModule.dailyScheduler.containsKey(new Integer(station))) {
			Dailyscheduler scheduler = AodModule.dailyScheduler.get(new Integer(station));
			if (scheduler != null) {
				ArrayList<Broadcast> broadcastsList = scheduler.getBroadcastList();
				for (int i = 0; i < broadcastsList.size(); i++) {
					if (broadcastsList.get(i).isOnair())
						return broadcastsList.get(i).toKrollDict();
				}
				String today = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
				if (scheduler.day.equals(today) == false) {
					scheduler.refreshList();
				}
			}
		}
		return new KrollDict();
	}

	private final class PreviewdataRequestHandler extends AsyncTask<Void, Void, KrollDict> {
		@Override
		protected KrollDict doInBackground(Void[] arg0) {
			// getting static data from module
			Log.d(LCAT, "doInBackground");
			KrollDict resultDict = getCurrentbroadcast();
			Log.d(LCAT, resultDict.toString());
			try {
				Log.d(LCAT, "Jsoup.connect " + url + station);
				doc = Jsoup.connect(url + station).ignoreContentType(false).get();
			} catch (IOException e) {
				e.printStackTrace();
				if (onError != null) {
					resultDict.put("error", e.getLocalizedMessage());
					onError.call(getKrollObject(), resultDict);
				}
			}
			return resultDict;
		}

		protected void onPostExecute(KrollDict resultDict) {

			String text = doc.select("text").get(0).text();
			String name = doc.select("name").get(0).text();
			if (text.startsWith(name)) {
				text = text.substring(name.length());
			}
			if (!resultDict.containsKey("title"))
				resultDict.put("title", name);
			if (!resultDict.containsKey("start"))
				resultDict.put("start", doc.select("time_start").get(0).text().substring(0,5));
			resultDict.put("name", name);
			resultDict.put("text", text);
			resultDict.put("href_text", doc.select("href_text").get(0).text());
			resultDict.put("href", doc.select("href").get(0).text());
			if (onLoad != null)
				onLoad.callAsync(getKrollObject(), resultDict);
			if (hasProperty("onLoad")) {
				((KrollFunction) getProperty("onLoad")).callAsync(getKrollObject(), resultDict);

			}

		}
	}

	// Handle creation options
	@Override
	public void handleCreationDict(KrollDict opts) {
		super.handleCreationDict(opts);
		if (opts.containsKey("station")) {
			station = opts.getInt("station");

		}
	}

	@Kroll.method	
	public void setStation(int station) {
		this.station = new Integer(station);
		timer.cancel();
		startTimer();
	}

	
	
	
	@Kroll.method
	public void start(KrollDict opts) {
		if (opts.containsKey("interval")) {
			interval = opts.getInt("interval");
		}
		if (opts.containsKey("onload")) {
			onLoad = (KrollFunction) opts.get("onload");
		}
		startTimer();
	}
	private void startTimer() {
		final Handler handler = new Handler();
		timer = new Timer();
		TimerTask doAsynchronousTask = new TimerTask() {
			@Override
			public void run() {
				handler.post(new Runnable() {
					public void run() {
						try {
							new PreviewdataRequestHandler().execute();
						} catch (Exception e) {
							Log.e(LCAT, e.getLocalizedMessage());
						}
					}
				});
			}
		};
		timer.schedule(doAsynchronousTask, 0, interval); // execute in every 

		Log.d(LCAT, "timer with interval " + interval + " started");
	}
	@Kroll.method
	public void stop() {
		timer.cancel();
	}

}
