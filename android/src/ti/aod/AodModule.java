/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2018 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.aod;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiApplication;

import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;

@Kroll.module(name = "Aod", id = "ti.aod")
public class AodModule extends KrollModule implements AsyncResponse {
	public static final String LCAT = "ðŸ§¯TiAod";
	@Kroll.constant
	public static final int STATION_DLF = 3;
	@Kroll.constant
	public static final int STATION_KULTUR = 4;
	@Kroll.constant
	public static final int STATION_DRK = 4;
	@Kroll.constant
	public static final int STATION_NOVA = 1;
	@Kroll.constant
	public static final int STATION_DRW = 1;

	// static HashMap<Integer, ArrayList<Broadcast>> broadcastsDepot;
	static HashMap<Integer, Dailyscheduler> dailyScheduler = new HashMap<Integer, Dailyscheduler>();

	public AodModule() {
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app) {
		// startDailyscheduler();
	}

	@Kroll.method
	public KrollDict getCurrentbroadcast(int stationid) {
		Dailyscheduler scheduler = dailyScheduler.get(new Integer(stationid));

		if (scheduler.day.equals(new SimpleDateFormat("yyyy-MM-dd").format(new Date())) == false) {
			scheduler.refreshList();
		}
		if (scheduler != null) {
			ArrayList<Broadcast> broadcastsList = scheduler.getBroadcastList();
			for (int i = 0; i < broadcastsList.size(); i++) {
				if (broadcastsList.get(i).isOnair())
					return broadcastsList.get(i).toKrollDict();
			}

		}
		return null;
	}

	@Kroll.method
	public void init() {
		String DLF = "http://www.deutschlandfunk.de/programmvorschau.281.de.rss";
		Dailyscheduler dlfscheduler = new Dailyscheduler(new Integer(STATION_DLF), DLF);
		dlfscheduler.delegate = this;

		String DRK = "http://www.deutschlandradiokultur.de/programmvorschau.282.de.rss";
		Dailyscheduler drkscheduler = new Dailyscheduler(new Integer(STATION_DRK), DRK);
		drkscheduler.delegate = this;
	}

	@Override
	public void processScheduler(int station, Dailyscheduler scheduler) {
		Log.d(LCAT, "processScheduler" + station);
		dailyScheduler.put(new Integer(station), scheduler);
	}
	
	static boolean isNetworkAvailable() {
	    ConnectivityManager manager =
	            (ConnectivityManager) TiApplication.getAppRootOrCurrentActivity().getSystemService(Context.CONNECTIVITY_SERVICE);
	    NetworkInfo networkInfo = manager.getActiveNetworkInfo();
	    boolean isAvailable = false;
	    if (networkInfo != null && networkInfo.isConnected()) {
	        // Network is present and connected
	        isAvailable = true;
	    }
	    return isAvailable;
	}
}
