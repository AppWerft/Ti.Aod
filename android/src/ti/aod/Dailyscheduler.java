/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2017 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.aod;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Timer;

import org.appcelerator.kroll.common.Log;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;

import android.os.AsyncTask;

// This proxy can be created by calling Drau.createExample({message: "hello world"})

public class Dailyscheduler {
	// Standard Debugging variables
	private static final String LCAT = AodModule.LCAT;

	private int station;
	private long interval = 1000;
	private boolean running = false;
	private Timer timer;

	ArrayList<Broadcast> broadcastList;
	String day = "";
	String endpoint;

	public Dailyscheduler(String endpoint) {
		super();
		this.endpoint = endpoint;
		refreshList();
	}

	public Broadcast getCurrentOnAir() {
		if (refreshList()) {
			for (int i=0; i<broadcastList.size();i++) {
				String start = broadcastList.get(i).getStart();
				String end = broadcastList.get(i).getEnd();
				
			}
			
		} else return null;
	}
	
	/*
	 * Tests if broadcastList is actually, in other case syncing with endpoint will
	 * triggered
	 */
	private  boolean refreshList() {
		if (this.broadcastList != null) {
			if (false == isToday(this.broadcastList.get(0).getStart())) {
				// old broadcastList need refresh:
				new SoupRequestHandler().execute(this.endpoint);
				return false;
			} else return true;
		}
		new SoupRequestHandler().execute(this.endpoint);
		return false;
	}

	private boolean isToday(String start) {
		String dateOfStart = start.substring(10);
		Calendar cal = Calendar.getInstance();
		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
		String dateOfToday = format.format(cal.getTime());
		return dateOfStart.equals(dateOfToday) ? true : false;
	}

	private final class SoupRequestHandler extends AsyncTask<String, Void, ArrayList<Broadcast>> {
		@Override
		protected ArrayList<Broadcast> doInBackground(String... urls) {

			ArrayList<Broadcast> broadcastList = new ArrayList<Broadcast>();
			try {
				Document document;
				document = Jsoup.connect(urls[0]).ignoreContentType(false).get();
				/* Convert from XML to list of broadcasts */
				for (Element elem : document.select("channel > item")) {
					Broadcast item = new Broadcast(elem.select("guid").get(0).text().substring(7, 23),
							elem.select("title").get(0).text(), elem.select("link").get(0).text());
					broadcastList.add(item);
				}
				/* calculating the ends: */
				for (int counter = 0; counter < broadcastList.size(); counter++) {
					Broadcast item = broadcastList.get(counter);
					if (counter < broadcastList.size() - 2) {
						item.setEnd(broadcastList.get(counter + 1).getStart());
					} else
						item.setEnd("24:00");
					broadcastList.set(counter, item);
				}
				return broadcastList;

			} catch (IOException e) {
				e.printStackTrace();
				return null;
			}
		}

		protected void onPostExecute(ArrayList<Broadcast> broadcastList) {
			Dailyscheduler.this.broadcastList = broadcastList;
		}
	}
}
