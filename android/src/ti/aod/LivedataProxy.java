/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2017 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.aod;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Timer;
import java.util.TimerTask;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;

import android.os.AsyncTask;
import android.os.Handler;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

@Kroll.proxy(creatableInModule = AodModule.class, propertyAccessors = { "onLoad" })
public class LivedataProxy extends KrollProxy {
	// Standard Debugging variables
	private static final String LCAT = AodModule.LCAT + "Preview";

	private int station;
	private long interval = 1000;
	private boolean running = false;
	private Timer timer;
	KrollFunction onError;
	KrollFunction onLoad;
	KrollDict broadcastFromAod = new KrollDict();
	KrollDict broadcastFromScheduler = new KrollDict();
	KrollDict broadcastFromJSON = new KrollDict();

	// Document doc;

	private String url = "http://srv.deutschlandradio.de/aodpreviewdata.1915.de.rpc?drbm:station_id=";

	// Constructor
	public LivedataProxy() {
		super();
	}

	private KrollDict getCurrentbroadcastFromScheduler() {
		if (AodModule.dailyScheduler.containsKey(new Integer(station))) {
			Dailyscheduler scheduler = AodModule.dailyScheduler.get(new Integer(station));
			if (scheduler != null) {
				ArrayList<Broadcast> broadcastsList = scheduler.getBroadcastList();
				for (int i = 0; i < broadcastsList.size(); i++) {
					if (broadcastsList.get(i).isOnair())
						return broadcastsList.get(i).toKrollDict();
				}
				String today = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
				if (scheduler.day.equals(today) == false) {
					scheduler.refreshList();
				}
			}
		}
		return new KrollDict();
	}

	private final class LivedataRequestHandler extends AsyncTask<Void, Void, Document> {
		@Override
		protected Document doInBackground(Void[] arg0) {

			try {
				Log.d(LCAT, "Jsoup.connect " + url + station);
				return Jsoup.connect(url + station).ignoreContentType(false).get();
			} catch (IOException e) {
				e.printStackTrace();
				if (onError != null) {

				}
			}
			return null;
		}

		protected void onPostExecute(Document doc) {

			String text = doc.select("text").get(0).text();
			String name = doc.select("name").get(0).text();
			if (text.startsWith(name)) {
				text = text.substring(name.length());
			}

			if (!broadcastFromAod.containsKey("title"))
				broadcastFromAod.put("title", name);
			if (!broadcastFromAod.containsKey("start"))
				broadcastFromAod.put("start", doc.select("time_start").get(0).text().substring(0, 5));
			broadcastFromAod.put("name", name);
			broadcastFromAod.put("text", text);
			broadcastFromAod.put("href_text", doc.select("href_text").get(0).text());
			broadcastFromAod.put("href", doc.select("href").get(0).text());

		}
	}

	public void getNovaLivePlaylistItem() {
		String URL = "https://static.deutschlandfunknova.de/actions/dradio/playlist/onair";
		OkHttpClient client = new OkHttpClient();
		Request request = new Request.Builder().url(URL).header("Authorization", "mein geheimer Schl√ºssel").build();

		client.newCall(request).enqueue(new Callback() {
			@Override
			public void onFailure(Call call, IOException e) {
				e.printStackTrace();
			}

			@Override
			public void onResponse(Call call, final Response response) throws IOException {
				if (!response.isSuccessful()) {
					throw new IOException("Unexpected code " + response);
				} else {
					String jsonData = response.body().string();
					try {
						JSONObject payload = new JSONObject(jsonData);
						KrollDict playlistItem = new KrollDict(payload.getJSONObject("playlistItem"));
						KrollDict presenter = new KrollDict(payload.getJSONObject("presenter"));
						KrollDict show = new KrollDict(payload.getJSONObject("show"));
						broadcastFromJSON.put("playlistItem", new KrollDict(playlistItem));
						broadcastFromJSON.put("presenter", new KrollDict(presenter));
						broadcastFromJSON.put("show", new KrollDict(show));
					} catch (JSONException e) {
						e.printStackTrace();
					}
				}
			}
		});

	};

	// Handle creation options
	@Override
	public void handleCreationDict(KrollDict opts) {
		super.handleCreationDict(opts);
		if (opts.containsKey("station")) {
			station = opts.getInt("station");

		}
	}

	private void sendBack() {
		KrollDict res = new KrollDict();
		long startTime=0;
		long stopTime =0;
		if (station == AodModule.STATION_NOVA) {
			res = broadcastFromJSON;
			startTime = Long.valueOf(res.getKrollDict("playlistitem").getInt("starttime"));
			stopTime = Long.valueOf(res.getKrollDict("playlistitem").getInt("stoptime"));
			
			res.put("starttime", startTime);
			res.put("endtime", startTime);
					
		} else {
			res = getCurrentbroadcastFromScheduler();
			res.put("title", broadcastFromAod.getString("title"));
			res.put("name", broadcastFromAod.getString("name"));
			res.put("text", broadcastFromAod.getString("text"));
		}
		long duration = stopTime -startTime;
		long now = System.currentTimeMillis();
		float progress = (now-startTime)/duration;
		res.put("duration", duration);
		res.put("progress", progress);
		
		if (onLoad != null)
			onLoad.callAsync(getKrollObject(), res);
		if (hasProperty("onLoad")) {
			((KrollFunction) getProperty("onLoad")).callAsync(getKrollObject(), res);

		}
	}

	@Kroll.method
	public void setStation(int station) {
		this.station = new Integer(station);
		timer.cancel();
		startTimer();
	}

	@Kroll.method
	public void start(KrollDict opts) {
		if (opts.containsKey("interval")) {
			interval = opts.getInt("interval");
		}
		if (opts.containsKey("onload")) {
			onLoad = (KrollFunction) opts.get("onload");
		}
		startTimer();
	}

	private void startTimer() {
		final Handler handler = new Handler();
		timer = new Timer();
		TimerTask doAsynchronousTask = new TimerTask() {
			@Override
			public void run() {
				handler.post(new Runnable() {
					public void run() {
						try {
							if (AodModule.isNetworkAvailable()) {
								new LivedataRequestHandler().execute();
								if (station == AodModule.STATION_NOVA) {
									getNovaLivePlaylistItem();
								}
							}
						} catch (Exception e) {
							Log.e(LCAT, e.getLocalizedMessage());
						}
					}
				});
			}
		};
		timer.schedule(doAsynchronousTask, 0, interval); // execute in every

		Log.d(LCAT, "timer with interval " + interval + " started");
	}

	@Kroll.method
	public void stop() {
		timer.cancel();
	}

}
